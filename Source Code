#include <Servo.h> //include servo library
Servo myservo; //define servo object
#include <SoftwareSerial.h>
SoftwareSerial bluetooth (0, 1);

int motor1_pin1 = 2;   //initializing Motor1 pins
int motor1_pin2 = 3;

int motor2_pin1 = 4;   //initializing Motor2 pins
int motor2_pin2 = 5;

int flameR = 6;   //initializing Right flame sensor
int flameM = 7;   //initializing Middle flame sensor
int flameL = 8;   //initializing Left flame sensor
int pos = 0;      //initializing servo position to 0 degrees

int sm = A0;    //initializing smoke sensor pin and 
int smTh = 400;   //threshold value

int sub = 9;    //initializing Submerged Motor pin
int smLED = 10;   //initializing smoke sensor indicating LED
 
char command;

void setup() {
  Serial.begin(9600);
  bluetooth.begin(9600);
  
  pinMode(0, INPUT);
  pinMode(1, OUTPUT);
  
  myservo.attach(9);
  myservo.write(0);

  pinMode(sm, INPUT);

  pinMode(flameR, INPUT);  //defining all flame sensors as Input
  pinMode(flameM, INPUT); 
  pinMode(flameL, INPUT); 
  
  pinMode(sub, OUTPUT);
  pinMode(smLED, OUTPUT);

  pinMode(motor1_pin1, OUTPUT);   //defining all motors as output
  pinMode(motor1_pin2, OUTPUT);
  pinMode(motor2_pin1, OUTPUT);
  pinMode(motor2_pin2, OUTPUT);

  pinMode(motor1_pin1, LOW);    //initializing all motors to LOW
  pinMode(motor1_pin2, LOW);
  pinMode(motor2_pin1, LOW);
  pinMode(motor2_pin2, LOW);
}

void loop() {
  smoke_De();

  if (bluetooth.available() > 0) {
    command = bluetooth.read();

    switch (command) {
      case 'F':
        forward();
        break;

      case 'G':
        backward();
        break;

      case 'R':
        right();
        break;

      case 'L':
        left();
        break;

      case 'X':
        stop();
        break;
    }
  }
  
  if ((digitalRead(flameR) == 0 && digitalRead(flameM) == 0) || digitalRead(flameR) == 0 )
  {
    
    flame_R();
    submerged_motor();
    
  }

  else if((digitalRead(flameL) == 0  && digitalRead(flameM) == 0) || digitalRead(flameL) == 0)
  {
    flame_L();
    submerged_motor();
    
  }

  else if(digitalRead(flameM) == 0)
  {
    flame_M();
    submerged_motor();
    
  }
  
  else{
    myservo.write(0);
    digitalWrite(sub, LOW);
  }
}

//forward direction function
void forward() {
    digitalWrite(motor1_pin1, HIGH);
    digitalWrite(motor1_pin2, LOW);
    digitalWrite(motor2_pin1, HIGH);
    digitalWrite(motor2_pin2, LOW);
    
}

//reverse direction function
void backward() {
  digitalWrite(motor1_pin1, LOW);
  digitalWrite(motor1_pin2, HIGH);
  digitalWrite(motor2_pin1, LOW);
  digitalWrite(motor2_pin2, HIGH);
  
}

//right direction function
void right(){
  digitalWrite(motor1_pin1, LOW);
  digitalWrite(motor1_pin2, HIGH);
  digitalWrite(motor2_pin1, HIGH);
  digitalWrite(motor2_pin2, LOW); 
  
}

//left direction function
void left(){
  digitalWrite(motor1_pin1, HIGH);
  digitalWrite(motor1_pin2, LOW);
  digitalWrite(motor2_pin1, LOW);
  digitalWrite(motor2_pin2, HIGH); 
 
}

//Motor stop function
void stop(){
  digitalWrite(motor1_pin1, LOW);
  digitalWrite(motor1_pin2, LOW);
  digitalWrite(motor2_pin1, LOW);
  digitalWrite(motor2_pin2, LOW);  
}

//Right flame sensor function
void flame_R(){  
    digitalWrite(LED_BUILTIN, HIGH); 
    
    for (pos = 0; pos <= 90; pos += 1) { // goes from 0 degrees to 180 degrees
      myservo.write(pos);              // tell servo to go to position in variable 'pos'
      delay(15);                       // waits 15 ms for the servo to reach the position
    }
    for (pos = 90; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
      myservo.write(pos);              // tell servo to go to position in variable 'pos'
      delay(15);                       // waits 15 ms for the servo to reach the position
    }    
}

//Left flame sensor function
void flame_L(){
    digitalWrite(LED_BUILTIN, HIGH); 
    
    for (pos = 90; pos <= 180; pos += 1) { // goes from 180 degrees to 0 degrees
      myservo.write(pos);              // tell servo to go to position in variable 'pos'
      delay(15);                       // waits 15 ms for the servo to reach the position
    }
    for (pos = 180; pos >= 90; pos -= 1) { // goes from 0 degrees to 180 degrees
      myservo.write(pos);              // tell servo to go to position in variable 'pos'
      delay(15);                       // waits 15 ms for the servo to reach the position
    }  
}

//Middle flame sensor function
void flame_M(){
    digitalWrite(LED_BUILTIN, HIGH); 
    
    for (pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees
      myservo.write(pos);              // tell servo to go to position in variable 'pos'
      delay(15);                       // waits 15 ms for the servo to reach the position
    }
    for (pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
      myservo.write(pos);              // tell servo to go to position in variable 'pos'
      delay(15);                       // waits 15 ms for the servo to reach the position
    }  
}

//smoke sensor function
void smoke_De(){
    if (analogRead(sm) > smTh){
    digitalWrite(smLED, HIGH);
    Serial.println("ATTENTION GAS DETECTED !!!!!!");
    delay(1000);
  }
  else{
    digitalWrite(smLED, LOW);
    Serial.println("PERFECT");
    delay(1000);
  }
}

//submerged motor function
void submerged_motor(){
    digitalWrite(sub, HIGH);
}
